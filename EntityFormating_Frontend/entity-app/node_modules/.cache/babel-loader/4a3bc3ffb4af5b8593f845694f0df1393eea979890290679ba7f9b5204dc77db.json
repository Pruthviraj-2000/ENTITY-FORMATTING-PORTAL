{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rakshith\\\\Desktop\\\\EntityFormating_Frontend\\\\entity-app\\\\src\\\\components\\\\Upload.js\",\n  _s = $RefreshSig$();\n// import React,{useCallback, useRef, useState} from 'react'\n// import { useCSVReader } from 'react-papaparse';\n\n// const Upload = () => {\n\n//     const {buttonRef} = useRef(null);\n//     const handleOnFileLoad = (data) => {\n//         console.log(data);\n//     };\n//     const onErrorHandler = (err,file,inputElem,reason) => {\n//         console.log(err)\n//     };\n//     const handleFileRemove=(data) => {\n//         console.log(data);\n//     }\n//     const handleOpenCSVReader = (e) =>{\n//         if(buttonRef.current){\n//             buttonRef.current.open(e);  \n//         }\n//     }\n//     const {CSVReader} = useCSVReader();\n//   return (\n// <div class=\"card w-75\">\n//   <div class=\"card-body\">\n//     <section className=\"container\">\n//         <CSVReader ref={buttonRef} onFieldLoad={handleOnFileLoad}\n//         onError={onErrorHandler}\n//         onClick\n//         onRemoveFile={handleFileRemove}\n//         >\n//           {({file}) => (\n//           <div class=\"d-inline-flex p-2 bd-highlight\">\n//                 <button type='button' onClick={handleOpenCSVReader}>Upload File</button>\n//           </div>)}\n//         </CSVReader>\n//     </section>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Upload\nimport React, { useState } from \"react\";\nimport Papa from \"papaparse\";\n\n// Allowed extensions for input file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst allowedExtensions = [\"csv/txt\"];\nconst App = () => {\n  _s();\n  // This state will store the parsed data\n  const [data, setData] = useState([]);\n\n  // It state will contain the error when\n  // correct file extension is not used\n  const [error, setError] = useState(\"\");\n\n  // It will store the file uploaded by the user\n  const [file, setFile] = useState(\"\");\n\n  // This function will be called when\n  // the file input changes\n  const handleFileChange = e => {\n    setError(\"\");\n\n    // Check if user has entered the file\n    if (e.target.files.length) {\n      const inputFile = e.target.files[0];\n\n      // Check the file extensions, if it not\n      // included in the allowed extensions\n      // we show the error\n      const fileExtension = inputFile === null || inputFile === void 0 ? void 0 : inputFile.type.split(\"/\")[1];\n      if (!allowedExtensions.includes(fileExtension)) {\n        setError(\"Please input a csv file\");\n        return;\n      }\n\n      // If input type is correct set the state\n      setFile(inputFile);\n    }\n  };\n  const handleParse = () => {\n    // If user clicks the parse button without\n    // a file we show a error\n    if (!file) return setError(\"Enter a valid file\");\n\n    // Initialize a reader which allows user\n    // to read any file or blob.\n    const reader = new FileReader();\n\n    // Event listener on reader when the file\n    // loads, we parse it and set the data.\n    reader.onload = async _ref => {\n      let {\n        target\n      } = _ref;\n      const csv = Papa.parse(target.result, {\n        header: true\n      });\n      const parsedData = csv === null || csv === void 0 ? void 0 : csv.data;\n      const columns = Object.keys(parsedData[1]);\n      setData(columns);\n    };\n    reader.readAsText(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"csvInput\",\n      style: {\n        display: \"block\"\n      },\n      children: \"Enter CSV File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: handleFileChange,\n      id: \"csvInput\",\n      name: \"file\",\n      type: \"File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleParse,\n        children: \"Parse\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"3rem\"\n      },\n      children: error ? error : data.map((col, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: col\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 3\n  }, this);\n};\n_s(App, \"y7kdyrePqAe2czxZAREC4Qqp7uE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Papa","allowedExtensions","App","data","setData","error","setError","file","setFile","handleFileChange","e","target","files","length","inputFile","fileExtension","type","split","includes","handleParse","reader","FileReader","onload","csv","parse","result","header","parsedData","columns","Object","keys","readAsText","display","marginTop","map","col","idx"],"sources":["C:/Users/Rakshith/Desktop/EntityFormating_Frontend/entity-app/src/components/Upload.js"],"sourcesContent":["// import React,{useCallback, useRef, useState} from 'react'\r\n// import { useCSVReader } from 'react-papaparse';\r\n\r\n\r\n// const Upload = () => {\r\n\r\n//     const {buttonRef} = useRef(null);\r\n//     const handleOnFileLoad = (data) => {\r\n//         console.log(data);\r\n//     };\r\n//     const onErrorHandler = (err,file,inputElem,reason) => {\r\n//         console.log(err)\r\n//     };\r\n//     const handleFileRemove=(data) => {\r\n//         console.log(data);\r\n//     }\r\n//     const handleOpenCSVReader = (e) =>{\r\n//         if(buttonRef.current){\r\n//             buttonRef.current.open(e);  \r\n//         }\r\n//     }\r\n//     const {CSVReader} = useCSVReader();\r\n//   return (\r\n// <div class=\"card w-75\">\r\n//   <div class=\"card-body\">\r\n//     <section className=\"container\">\r\n//         <CSVReader ref={buttonRef} onFieldLoad={handleOnFileLoad}\r\n//         onError={onErrorHandler}\r\n//         onClick\r\n//         onRemoveFile={handleFileRemove}\r\n//         >\r\n//           {({file}) => (\r\n//           <div class=\"d-inline-flex p-2 bd-highlight\">\r\n//                 <button type='button' onClick={handleOpenCSVReader}>Upload File</button>\r\n//           </div>)}\r\n//         </CSVReader>\r\n//     </section>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Upload\r\nimport React, { useState } from \"react\";\r\nimport Papa from \"papaparse\";\r\n\r\n// Allowed extensions for input file\r\nconst allowedExtensions = [\"csv/txt\"];\r\n\r\nconst App = () => {\r\n\t\r\n\t// This state will store the parsed data\r\n\tconst [data, setData] = useState([]);\r\n\t\r\n\t// It state will contain the error when\r\n\t// correct file extension is not used\r\n\tconst [error, setError] = useState(\"\");\r\n\t\r\n\t// It will store the file uploaded by the user\r\n\tconst [file, setFile] = useState(\"\");\r\n\r\n\t// This function will be called when\r\n\t// the file input changes\r\n\tconst handleFileChange = (e) => {\r\n\t\tsetError(\"\");\r\n\t\t\r\n\t\t// Check if user has entered the file\r\n\t\tif (e.target.files.length) {\r\n\t\t\tconst inputFile = e.target.files[0];\r\n\t\t\t\r\n\t\t\t// Check the file extensions, if it not\r\n\t\t\t// included in the allowed extensions\r\n\t\t\t// we show the error\r\n\t\t\tconst fileExtension = inputFile?.type.split(\"/\")[1];\r\n\t\t\tif (!allowedExtensions.includes(fileExtension)) {\r\n\t\t\t\tsetError(\"Please input a csv file\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// If input type is correct set the state\r\n\t\t\tsetFile(inputFile);\r\n\t\t}\r\n\t};\r\n\tconst handleParse = () => {\r\n\t\t\r\n\t\t// If user clicks the parse button without\r\n\t\t// a file we show a error\r\n\t\tif (!file) return setError(\"Enter a valid file\");\r\n\r\n\t\t// Initialize a reader which allows user\r\n\t\t// to read any file or blob.\r\n\t\tconst reader = new FileReader();\r\n\t\t\r\n\t\t// Event listener on reader when the file\r\n\t\t// loads, we parse it and set the data.\r\n\t\treader.onload = async ({ target }) => {\r\n\t\t\tconst csv = Papa.parse(target.result, { header: true });\r\n\t\t\tconst parsedData = csv?.data;\r\n\t\t\tconst columns = Object.keys(parsedData[1]);\r\n\t\t\tsetData(columns);\r\n\t\t};\r\n\t\treader.readAsText(file);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<label htmlFor=\"csvInput\" style={{ display: \"block\" }}>\r\n\t\t\t\tEnter CSV File\r\n\t\t\t</label>\r\n\t\t\t<input\r\n\t\t\t\tonChange={handleFileChange}\r\n\t\t\t\tid=\"csvInput\"\r\n\t\t\t\tname=\"file\"\r\n\t\t\t\ttype=\"File\"\r\n\t\t\t/>\r\n\t\t\t<div>\r\n\t\t\t\t<button onClick={handleParse}>Parse</button>\r\n\t\t\t</div>\r\n\t\t\t<div style={{ marginTop: \"3rem\" }}>\r\n\t\t\t\t{error ? error : data.map((col,\r\n\t\t\t\tidx) => <div key={idx}>{col}</div>)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}