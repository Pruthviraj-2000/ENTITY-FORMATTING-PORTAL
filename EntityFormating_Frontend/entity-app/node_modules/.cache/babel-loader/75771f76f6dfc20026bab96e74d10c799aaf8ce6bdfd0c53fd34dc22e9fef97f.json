{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rakshith\\\\Desktop\\\\EntityFormating_Frontend\\\\entity-app\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { FormControl, Grid, InputLabel, MenuItem, Select, Typography } from \"@mui/material\";\nimport Main from \"./Main\";\nimport { format } from \"./Util/Formatt\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  var _format$selectedColum;\n  const [rows, setRows] = useState([]);\n  const [updatedRow, setUpdatedRow] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\n  const [selectedFormat, setSelectedFormat] = useState(\"\");\n  const handleColumns = _ref => {\n    let {\n      columns,\n      rows\n    } = _ref;\n    setColumns(columns);\n    setRows(rows);\n  };\n  const handleFormat = e => {\n    setSelectedFormat(e.target.value);\n    let res = [];\n    if (selectedColumn === \"date\") {\n      if (selectedColumn === \"Total\") {\n        res = rows.filter(row => row[selectedColumn] && (row[selectedColumn] = new Intl.NumberFormat(\"en-IN\", {\n          maximumSignificantDigits: 3,\n          style: \"currency\",\n          currency: e.target.value\n        }).format(row[selectedColumn])));\n      }\n    }\n    setUpdatedRow(res);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: \"50px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-lg-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            margin: \"1rem\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n            style: {\n              margin: \"1rem 0\"\n            },\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              id: \"demo-simple-select-label\",\n              children: \"Select Column\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"demo-select\",\n              value: selectedColumn,\n              label: \"Select Column\",\n              onChange: e => setSelectedColumn(e.target.value),\n              children: columns.map(column => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: column.accessor,\n                children: column.Header\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            margin: \"1rem\"\n          },\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"demo-simple-select-label\",\n              children: \"Format Options\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"demo-simple-select-label\",\n              id: \"demo-simple-select\",\n              value: selectedFormat,\n              label: \"Format Options\",\n              onChange: handleFormat,\n              children: (_format$selectedColum = format[selectedColumn]) === null || _format$selectedColum === void 0 ? void 0 : _format$selectedColum.map(val => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: val,\n                children: val\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        item: true,\n        sm: 6,\n        xs: 6,\n        children: /*#__PURE__*/_jsxDEV(Main, {\n          handleColumns: handleColumns,\n          updatedRows: updatedRow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"haxVG4nlwoVWeRr6KU3swsaErfM=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","FormControl","Grid","InputLabel","MenuItem","Select","Typography","Main","format","Dashboard","rows","setRows","updatedRow","setUpdatedRow","columns","setColumns","selectedColumn","setSelectedColumn","selectedFormat","setSelectedFormat","handleColumns","handleFormat","e","target","value","res","filter","row","Intl","NumberFormat","maximumSignificantDigits","style","currency","marginTop","margin","map","column","accessor","Header","val"],"sources":["C:/Users/Rakshith/Desktop/EntityFormating_Frontend/entity-app/src/components/Dashboard.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport Main from \"./Main\";\r\nimport { format } from \"./Util/Formatt\";\r\n\r\nconst Dashboard = () => {\r\n  const [rows, setRows] = useState([]);\r\n  const [updatedRow, setUpdatedRow] = useState([]);\r\n  const [columns, setColumns] = useState([]);\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedFormat, setSelectedFormat] = useState(\"\");\r\n\r\n  const handleColumns = ({ columns, rows }) => {\r\n    setColumns(columns);\r\n    setRows(rows);\r\n  };\r\n\r\n  const handleFormat = (e) => {\r\n    setSelectedFormat(e.target.value);\r\n\r\n    let res = [];\r\n\r\n    if (selectedColumn === \"date\") {\r\n      if (selectedColumn === \"Total\") {\r\n        res = rows.filter(\r\n          (row) =>\r\n            row[selectedColumn] &&\r\n            (row[selectedColumn] = new Intl.NumberFormat(\"en-IN\", {\r\n              maximumSignificantDigits: 3,\r\n              style: \"currency\",\r\n              currency: e.target.value,\r\n            }).format(row[selectedColumn]))\r\n        );\r\n      }\r\n    } \r\n    setUpdatedRow(res);\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginTop: \"50px\" }}>\r\n      <div className=\"row\">\r\n        <div className=\"col-lg-6\">\r\n          <div style={{ margin: \"1rem\" }}>\r\n            <h6\r\n              style={{ margin: \"1rem 0\" }}\r\n            >\r\n              Actions\r\n            </h6>\r\n            <form>\r\n              <label id='demo-simple-select-label'>\r\n                Select Column\r\n                </label>\r\n              {/* <Select\r\n                labelId='demo-simple-select-label'\r\n                id='demo-simple-select'\r\n                value={selectedColumn}\r\n                label='Select Column'\r\n                onChange={(e) => setSelectedColumn(e.target.value)}\r\n              >\r\n                {columns.map((column) => (\r\n                  <MenuItem value={column.accessor}>{column.Header}</MenuItem>\r\n                ))}\r\n              </Select> */}\r\n              <select id=\"demo-select\" value={selectedColumn} label=\"Select Column\"\r\n              onChange={(e)=> setSelectedColumn(e.target.value)}>\r\n                {columns.map((column) => (\r\n                  <option value={column.accessor}>{column.Header}</option>\r\n                ))}\r\n              </select>\r\n            </form>\r\n          </div>\r\n          <div style={{ margin: \"1rem\" }}>\r\n            <FormControl fullWidth>\r\n              <InputLabel id='demo-simple-select-label'>\r\n                Format Options\r\n              </InputLabel>\r\n              <Select\r\n                labelId='demo-simple-select-label'\r\n                id='demo-simple-select'\r\n                value={selectedFormat}\r\n                label='Format Options'\r\n                onChange={handleFormat}\r\n              >\r\n                {format[selectedColumn]?.map((val) => (\r\n                  <MenuItem value={val}>{val}</MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\"\r\n          item\r\n          sm={6}\r\n          xs={6}\r\n        >\r\n          <Main\r\n            handleColumns={handleColumns}\r\n            updatedRows={updatedRow}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}